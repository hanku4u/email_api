from sqlalchemy.orm import Session
import app.models.models as models
import app.schemas.user as schemas
from typing import List
from logger import logger


# CRUD functions for users

# Create a new user in the database
def create_user(db: Session, user: schemas.UserCreate):
    
    # Create a new user object using the data from the UserCreate schema
    db_user = models.User(**user.dict())
    
    # Add the new user object to the session
    db.add(db_user)
    
    # Commit the session to save the new user to the database
    db.commit()
    
    # Refresh the user object to get the ID that was generated by the database
    db.refresh(db_user)
    
    return db_user  # Return the new user object


# Get a user from the database by ID
def get_user(db: Session, user_id: int):

    # Query the database for a user with the specified ID and return the first result
    return db.query(models.User).filter(models.User.id == user_id).first()


# Find a user by name
def find_user_by_name(queryName: str, db: Session):
    user = db.query(models.User).filter(models.User.last_name.like(f'%{queryName}%')).all()

    if len(user) == 0:
        return ["No users found"]
    
    if user is not None:
        return user


# Find a users by department
def find_user_by_dept(queryDept: str, db: Session):
    users = db.query(models.User).filter(models.User.dept_name.like(f'%{queryDept}%')).all()

    if len(users) == 0:
        return ["No users found"]
    else:
        return users


# Get all users from the database
def get_users(db: Session, skip: int = 0, limit: int = 100):

    # Query the database for all users, offset by skip and limited by limit, and return the results as a list
    return db.query(models.User).offset(skip).limit(limit).all()


# Update a user in the database. DO NOT USE THIS FUNCTION TO UPDATE EMAIL TYPES
def update_user(db: Session, user_id: int, user: schemas.User):

    # Get the user from the database by ID
    db_user = db.query(models.User).filter(models.User.id == user_id).first()

    # Update the user object with the new data. skip if it is not passed
    if user.ghr_id is not None:
        db_user.ghr_id = user.ghr_id

    if user.first_name is not None:
        db_user.first_name = user.first_name

    if user.last_name is not None:
        db_user.last_name = user.last_name

    if user.dept_name is not None:
        db_user.dept_name = user.dept_name

    if user.status is not None:
        db_user.status = user.status

    if user.title is not None:
        db_user.title = user.title

    if user.email is not None:
        db_user.email = user.email

    if user.subscribed is not None:
        db_user.subscribed = user.subscribed

    db.commit() # Commit the session to save the changes to the database

    db.refresh(db_user) # Refresh the user object to update it with any changes made by the database

    return db_user  # Return the updated user object


# Delete a user from the database
def delete_user(db: Session, user_id: int):

    # Get the user from the database by ID
    db_user = db.query(models.User).filter(models.User.id == user_id).first()

    # Delete the user from the session
    db.delete(db_user)

    # Commit the session to delete the user from the database
    db.commit()

    # Return the deleted user object
    return {'User deleted successfully'}


# CRUD function to subscribe a user to email types
def subscribe_user_to_email_types(db: Session, userID: int, email_type_ids: List[int]):

    # Get the user object from the database by ID
    user = db.query(models.User).filter(models.User.id == userID).first()
    if not user:
        return None

    # get a list of emails user is already subscribed to
    subscribed_emails = []
    for email_type in user.email_types:
        subscribed_emails.append(email_type.id)

    # if email ID that was passed is not subscribed add it to an updated list
    updated_email_ids = []
    for email_id in email_type_ids:
        if email_id not in subscribed_emails:
            updated_email_ids.append(email_id)

    # Loop through the updated list of email IDs and add new UserEmailType objects to the database for each email type
    if len(updated_email_ids) == 0:
        pass
    else:
        for email_id in updated_email_ids:

            # Create a new UserEmailType object with the current user's ID and the current email type's ID
            user_email_type = models.UserEmailType(user_id=userID, email_type_id=email_id)

            # Add the UserEmailType object to the database
            db.add(user_email_type)

            # Commit the changes to the database
            db.commit()

    # Refresh the user object to get the latest version from the database
    db.refresh(user)
    
    return user # Return the updated user object


# CRUD function to unsubscribe a user from an email type
def unsubscribe_email_type(db: Session, userID: int, email_type_id: List[int]):
    # Get the user object from the database by ID
    user = db.query(models.User).filter(models.User.id == userID).first()
    if not user:
        return None

    # delete the record in UserEmailType table
    for email_id in email_type_id:
        record = db.query(models.UserEmailType).get((userID, email_id))

        db.delete(record)

        db.commit()

    # Refresh the user object to get the latest version from the database
    db.refresh(user)

    return user

