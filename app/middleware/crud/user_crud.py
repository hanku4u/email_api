from sqlalchemy.orm import Session
import app.models.models as models
import app.schemas.user as schemas
from typing import List


# CRUD functions for users

# Create a new user in the database
def create_user(db: Session, user: schemas.UserCreate):
    
    # Create a new user object using the data from the UserCreate schema
    db_user = models.User(**user.dict())
    
    # Add the new user object to the session
    db.add(db_user)
    
    # Commit the session to save the new user to the database
    db.commit()
    
    # Refresh the user object to get the ID that was generated by the database
    db.refresh(db_user)
    
    return db_user  # Return the new user object


# Get a user from the database by ID
def get_user(db: Session, user_id: int):

    # Query the database for a user with the specified ID and return the first result
    return db.query(models.User).filter(models.User.id == user_id).first()


# Get all users from the database
def get_users(db: Session, skip: int = 0, limit: int = 100):

    # Query the database for all users, offset by skip and limited by limit, and return the results as a list
    return db.query(models.User).offset(skip).limit(limit).all()


# Update a user in the database. DO NOT USE THIS FUNCTION TO UPDATE EMAIL TYPES
def update_user(db: Session, user_id: int, user: schemas.User):

    # Get the user from the database by ID
    db_user = db.query(models.User).filter(models.User.id == user_id).first()

    # Loop through the fields in the User schema and set the values of the corresponding fields in the user object
    for field, value in user:
        setattr(db_user, field, value)

    # Commit the session to save the changes to the database
    db.commit()

    # Refresh the user object to update it with any changes made by the database
    db.refresh(db_user)

    return db_user  # Return the updated user object


# Delete a user from the database
def delete_user(db: Session, user_id: int):

    # Get the user from the database by ID
    db_user = db.query(models.User).filter(models.User.id == user_id).first()

    # Delete the user from the session
    db.delete(db_user)

    # Commit the session to delete the user from the database
    db.commit()

    # Return the deleted user object
    return db_user


# CRUD function to subscribe a user to email types
def subscribe_user_to_email_types(db: Session, userID: int, email_type_ids: List[int]):

    # Get the user object from the database by ID
    user = db.query(models.User).filter(models.User.id == userID).first()
    if not user:
        return None

    # Loop through the email_type_ids list and add new UserEmailType objects to the database for each email type
    for email_id in email_type_ids:

        # Create a new UserEmailType object with the current user's ID and the current email type's ID
        user_email_type = models.UserEmailType(user_id=userID, email_type_id=email_id)

        # Add the UserEmailType object to the database
        db.add(user_email_type)

        # Commit the changes to the database
        db.commit()

    # Refresh the user object to get the latest version from the database
    db.refresh(user)
    # Return the updated user object
    return user
